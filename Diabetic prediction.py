# -*- coding: utf-8 -*-
"""Data_Science_ML_3__.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/manishaneupane3901/Data-Science-ML-3/blob/main/Data_Science_ML_3__.ipynb

Importing libraries
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data collection and analysis

"""

df = pd.read_csv('diabetes.csv')
df.head()
df.shape
df.describe()

df['Outcome'].value_counts()

#

"""0- Non-Diabetic
1-Diabetics
"""

df.groupby('Outcome').mean()

#seperating data and labels
X=df.drop(columns='Outcome',axis=1)
Y=df['Outcome']
print(X)
print(Y)

"""data standardization

"""

scaler = StandardScaler()

scaler.fit(X)

"""To fit the data into same range

"""

standardized_data = scaler.transform(X)
print(standardized_data)

X=standardized_data
Y=df['Outcome']
print(X)
print(Y)

"""Data spliting into train and test"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)
#testsize 0.2 represents 20% of data for test data stratifying based on Y ie diabetic or non diabetic

print(X.shape,X_train.shape,X_test.shape)

"""Training the model"""

classifier=svm.SVC(kernel='linear')

#training the svm classifier
classifier.fit(X_train,Y_train)

"""#  Model evaluation"""

#accuracy score on training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)
print('Accuracy score of training data :',training_data_accuracy)

#accuracy score on test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)
print('Accuracy score of test data :',test_data_accuracy)

#making a predictive system
input_data = [1,189,60,23,846,30.1,0.398,59]
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
std_data = scaler.transform(input_data_reshaped)
print(std_data)
prediction = classifier.predict(std_data)
print(prediction)
if(prediction[0]==0):
    print('The person is not diabetic')
else:
    print('The person is diabetic')